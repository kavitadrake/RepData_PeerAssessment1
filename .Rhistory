source('~/R/learning materials/exploratoryDA/plot3.R')
source('~/R/learning materials/exploratoryDA/plot3.R')
View(data)
plot(data$Voltage, datetime, type="l")
plot(datetime, data$Voltage, ylab = "Voltage", type="l")
plot(datetime, data$Global_reactive_power, ylab = "Global_reactive_power", type = "l")
?mfrow
??mfrow
par(mfrow = c(2, 2))
plot(datetime, data$Global_active_power,
type = "l",
main = "Global Active Power",
ylab = "Global Active Power (kilo watts)",
xlab = "" #The graph on the course page had no label here.
)
plot(datetime, data$Voltage, ylab = "Voltage", type="l")
plot(datetime, data$Sub_metering_1,
type = "n",
ylab = "Energy sub metering",
xlab = ""
)
points(datetime, data$Sub_metering_1, type = "l")
points(datetime, data$Sub_metering_2, type = "l", col = "red")
points(datetime, data$Sub_metering_3, type = "l", col = "blue")
legend("topright",
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col = c("black", "red", "blue"),
lty=1
)
plot(datetime, data$Global_reactive_power, ylab = "Global_reactive_power", type = "l")
source('~/R/learning materials/exploratoryDA/plot4.R')
?legen
?legend
source('~/R/learning materials/exploratoryDA/plot4.R')
source('~/R/learning materials/exploratoryDA/plot4.R')
source('~/R/learning materials/exploratoryDA/plot4.R')
source('~/R/learning materials/exploratoryDA/plot4.R')
source('~/R/learning materials/exploratoryDA/plot4.R')
source('~/R/learning materials/exploratoryDA/plot4.R')
source('~/R/learning materials/exploratoryDA/plot4.R')
source('~/R/learning materials/exploratoryDA/plot4.R')
??subset
?subset
rm(list=ls())
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col = "red", main = "Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality)
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5, 1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5, 1))
p <- xyplot(Ozone~Wind, data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
swirl()
library(swirl)
swirl()
myedit("plot1.R")
source(pathtofile="plot1.R", local=TRUE)
source("plot1.R", local=TRUE)
source(pathtofile, local=TRUE)
?
.
help()
?help
info()
skip()
myedit("plot2.R")
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat | color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
rm(list=ls())
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(displ, hwy, data = mpg)
g <- ggplot(mpg, displ, hwy)
g <- ggplot(data = mpg, displ, hwy)
head(mpg)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size = 4, alpha = 1/2)
g+geom_point(size = 4, alpha = 1/2, aes(color=drv))
g+geom_point(size = 4, alpha = 1/2, aes(color=drv))+labs(title="Swirl Rules!")+labs(x = "Displacement", y = "Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x = "Displacement", y = "Hwy Mileage")
g+geom_point(color = aes(drv), size = 2, alpha = 1/2)+geom_smooth(size = 4, linetype = 3, method = "lm", se=FALSE)
g+geom_point(aes(color=drv), size = 2, alpha = 1/2)+geom_smooth(size = 4, linetype = 3, method = "lm", se=FALSE)
g+geom_point(aes(color = drv))+theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(c(x = myx, y = myy)))
g <- ggplot(testdat, aes(x = myx, y = myy))
g+geom_line
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g <- ggplot(testdat, aes(x=displ, y = hwy, color = factor(year)))
g <- ggplot(mpg, aes(x=displ, y = hwy, color = factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")+labs(x="Displacement", y="Highway Mileage", title = "Swirl Rules!")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lattice
?lines
?lpoints
library(datasets)
library(datasets)
data(airquality)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
qplot(votes, rating, data = movies)
?splom
?lines
?axis
?llines
?trellis
??trellis
data(airquality)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month)
)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
rm(list=ls())
swirl()
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut)+geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut)+geom_smooth(method = "lm")+facets(.~cut)
qplot(carat, price, data = diamonds, color = cut, facets = .~cut)+geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha = 1/2)
g+geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g+geom_point(alpha = 1/3)+facet_grid(cut ~ car2)
diamonds[myd,]
g+geom_point(alpha = 1/3)+facet_grid(cut ~ car2)+geom_smooth(method = "lm", size = 3, color = "pink")
ggplot2(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
library(swirl)
swirl()
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
midst(x, y, newCx, newCy)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd =3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
library(swirl)
swirl()
head(datamatrix)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPratt.R", local = TRUE)
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(matrix())
)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd$v * (svd1$u[,1] %*% svd1$d[1])
l
a1 <- svd$v %*% svd1$u[,1] %*% svd1$d[1]
skip()
myImage(a1)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[2]) %*% svd1$v[1:2,]
skip()
myImage
myImage(a1)
myImage(a2)
myImage(svd1$u[,1:5] %*%  diag(svd1$d[1:5])  %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*%  diag(svd1$d[1:10])  %*% t(svd1$v[,1:10]))
library(swirl)
swirl(0)
dim(ssd)
names(ssd$[,562:563])
names(ssd[,562:563])
table(ssd$subject)
sum(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1, c(10:12, maxCon))
mdist <- dist(sub1$c(10:12, maxCon))
skip()
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1$[,1:562], centers = 6)
kClust <- kmeans(sub1[,1:562], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$cluster)
dim(kClust$clusters)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative na.rm = TRUE)
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
setwd("~/R/learning materials/RepData_PeerAssessment1")
library(stringr)
library(dplyr)
library(lubridate)
library(ggplot2)
totalData <- read.csv("activity.csv")
#Original data had interval values like '50' and '1430' which would mean the
#number of minutes since midnight, essentially military time. So I add leading
#and trailing zeros to make it a valid time.
totalData$newinterval <- str_pad(totalData$interval, 4, "left", pad = "0")
totalData$newinterval <- str_pad(totalData$newinterval, 6, "right", pad = "0")
#Add colons every two characters.
totalData$newinterval <- gsub("(\\d\\d)(\\d\\d)(\\d\\d)", "\\1:\\2:\\3", totalData$newinterval)
#Create a new column which concatenates the date and interval fields, and puts
#them in a date and time format.
totalData$datetime <- paste(totalData$date, totalData$newinterval, sep = " ")
totalData$datetime <- ymd_hms(totalData$datetime)
totalStepsByDate <- aggregate(steps ~ day(datetime), totalData, sum)
names(totalStepsByDate)[names(totalStepsByDate) == "day(datetime)"] <- "datetime"
meanStepsByInterval <- aggregate(steps ~ interval, totalData, mean)
maxrow <- which.max(meanStepsByInterval$steps)
maxrow <- meanStepsByInterval[maxrow,]
maxsteps <- as.character(round(maxrow[,2]))
maxinterval <- as.character(round(maxrow[,1]))
timeofinterval <- filter(totalData, interval == maxinterval)[1,5]
timeofinterval <- format(timeofinterval, format = "%I:%M%p")
testData <- totalData
valueInQuestion <- testData[1, ]$steps
valueInQuestion
intervalInQuestion <- testData[1,interval
]
intervalInQuestion <- testData[1,]$interval
intervalInQuestion
if(is.na(valueInQuestion)){
testData[1,]$stepsFilled <- filter(meanStepsByInterval, interval == intervalInQuestion)
}
filter(meanStepsByInterval, interval == intervalInQuestion)
filter(meanStepsByInterval, interval == intervalInQuestion)[,2]
if(is.na(valueInQuestion)){
testData[1,]$stepsFilled <- filter(meanStepsByInterval, interval == intervalInQuestion)[,2]
}
testData[1,]$stepsFilled <- filter(meanStepsByInterval, interval == intervalInQuestion)[,2]
testData$stepsFilled <- filter(meanStepsByInterval, interval == intervalInQuestion)[,2]
head(testData)
testData <- totalData
head(testData)
testData$stepsFilled[1,] <- filter(meanStepsByInterval, interval == intervalInQuestion)[,2]
testData[1,]$stepsFilled <- filter(meanStepsByInterval, interval == intervalInQuestion)[,2]
testData[1,]$steps
??column
?cbind
testData$stepsFilled <- ""
head(testData)
testData[1,]$stepsFilled <- filter(meanStepsByInterval, interval == intervalInQuestion)[,2]
head(testData)
totalData$stepsFilled <- ""
for(i in 1:nrow(totalData)){
valueInQuestion <- totalData[i, ]$steps
intervalInQuestion <- totalData[i,]$interval
if(is.na(valueInQuestion)){
totalData[i,]$stepsFilled <- filter(meanStepsByInterval, interval == intervalInQuestion)[,2]
}
totalData[i,]$stepsFilled <- valueInQuestion
}
head(totalData)
for(i in 1:nrow(totalData)){
valueInQuestion <- totalData[i, ]$steps
intervalInQuestion <- totalData[i,]$interval
if(is.na(valueInQuestion)){
totalData[i,]$stepsFilled <- filter(meanStepsByInterval, interval == intervalInQuestion)[,2]
} else {
totalData[i,]$stepsFilled <- valueInQuestion}
}
head(totalData)
newTotalData <- totalData
for(i in 1:nrow(newTotalData)){
valueInQuestion <- newTotalData[i, ]$steps
intervalInQuestion <- newTotalData[i,]$interval
if(is.na(valueInQuestion)){
newTotalData[i,]$steps <- filter(meanStepsByInterval, interval == intervalInQuestion)[,2]
} else {
newTotalData[i,]$steps <- valueInQuestion}
}
View(newTotalData)
rm(list=ls())
library(stringr)
library(dplyr)
library(lubridate)
library(ggplot2)
totalData <- read.csv("activity.csv")
#Original data had interval values like '50' and '1430' which would mean the
#number of minutes since midnight, essentially military time. So I add leading
#and trailing zeros to make it a valid time.
totalData$newinterval <- str_pad(totalData$interval, 4, "left", pad = "0")
totalData$newinterval <- str_pad(totalData$newinterval, 6, "right", pad = "0")
#Add colons every two characters.
totalData$newinterval <- gsub("(\\d\\d)(\\d\\d)(\\d\\d)", "\\1:\\2:\\3", totalData$newinterval)
#Create a new column which concatenates the date and interval fields, and puts
#them in a date and time format.
totalData$datetime <- paste(totalData$date, totalData$newinterval, sep = " ")
totalData$datetime <- ymd_hms(totalData$datetime)
meanStepsByInterval <- aggregate(steps ~ interval, totalData, mean)
head(totalData)
newTotalData <- totalData
for(i in 1:nrow(newTotalData)){
valueInQuestion <- newTotalData[i, ]$steps
intervalInQuestion <- newTotalData[i,]$interval
if(is.na(valueInQuestion)){
newTotalData[i,]$steps <- filter(meanStepsByInterval, interval == intervalInQuestion)[,2]
} else {
newTotalData[i,]$steps <- valueInQuestion}
}
head(newTotalData)
View(newTotalData)
intervalInQuestion<-"0010"
filter(meanStepsByInterval, interval == intervalInQuestion)[,2]
intervalInQuestion<-0010
filter(meanStepsByInterval, interval == intervalInQuestion)[,2]
round(filter(meanStepsByInterval, interval == intervalInQuestion)[,2], 1)
newTotalData <- totalData
for(i in 1:nrow(newTotalData)){
valueInQuestion <- newTotalData[i, ]$steps
intervalInQuestion <- newTotalData[i,]$interval
if(is.na(valueInQuestion)){
newTotalData[i,]$steps <- round(filter(meanStepsByInterval, interval == intervalInQuestion)[,2], 1)
} else {
newTotalData[i,]$steps <- valueInQuestion}
}
head(newTotalData)
?weekdays
?wday
wday(newTotalData[1,5])
wday(newTotalData[1,5], label = TRUE)
newTotalData$category <- ""
for(i in 1:nrow(newTotalData)){
dayInQuestion <- wday(newTotalData[i, 5], label = TRUE)
if(dayInQuestion == "Sun" | dayInQuestion == "Sat"){
newTotalData[i,]$category <- "weekend"
} else {
newTotalData[i,]$category <- "weekday"}
}
head(newTotalData)
str(newTotalData)
test <- aggregate(steps~interval+category,newTotalData,mean)
head(test)
View(test)
?facet_wrap
ggplot(data = test, aes(interval, steps)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color="steelblue") +
facet_wrap(~ category)
ggplot(data = test, aes(interval, steps)) +
geom_line(color = "steelblue") +
geom_point(color="steelblue") +
facet_wrap(~ category)
ggplot(data = test, aes(interval, steps)) +
geom_line(color = "steelblue") +
facet_wrap(~ category)
finalplot <- ggplot(data = newTotalData, aes(interval, steps))
finalplot + geom_line(color = "darkorchid4") +
facet_wrap(~ category) +
scale_x_continuous(breaks = c(0,500,1000, 1500, 2000),
labels = c("Midnight", "5am", "10am", "3pm", "8pm")) +
labs(x = "Hour of the day, over 5 minute intervals",
y = "Number of steps" )
finalplot <- ggplot(data = newTotalData, aes(interval, steps))
finalplot + geom_line(color = "darkorchid4") +
facet_wrap(~ category) +
# scale_x_continuous(breaks = c(0,500,1000, 1500, 2000),
#   labels = c("Midnight", "5am", "10am", "3pm", "8pm")) +
labs(x = "Hour of the day, over 5 minute intervals",
y = "Number of steps" )
finalplot <- ggplot(data = newTotalData, aes(interval, steps))
finalplot + geom_line(color = "darkorchid4") +
facet_wrap(~ category) +
# scale_x_continuous(breaks = c(0,500,1000, 1500, 2000),
#   labels = c("Midnight", "5am", "10am", "3pm", "8pm")) +
labs(x = "Hour of the day, over 5 minute intervals",
y = "Number of steps" )
stepsByDayType <- aggregate(steps ~ interval + category, newTotalData, mean)
finalplot <- ggplot(data = stepsByDayType, aes(interval, steps))
finalplot + geom_line(color = "darkorchid4") +
facet_wrap(~ category) +
scale_x_continuous(breaks = c(0,500,1000, 1500, 2000),
labels = c("Midnight", "5am", "10am", "3pm", "8pm")) +
labs(x = "Hour of the day, over 5 minute intervals",
y = "Number of steps" )
